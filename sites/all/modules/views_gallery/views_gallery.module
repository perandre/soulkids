<?php
// $Id: views_gallery.module,v 1.1 2009/07/23 21:36:42 karens Exp $

/**
 * @file
 * Creates photo gallery feature, including image and gallery content types.
 */

/**
 * The content types to use for the image and gallery.
 * 
 * Modules and profiles can alter these values
 * by doing varible_set() to change this value 
 * before installing this module.
 */
function views_gallery_image_type() {
  return variable_get('views_gallery_image_type', 'image');
}

function views_gallery_gallery_type() {
  return variable_get('views_gallery_gallery_type', 'gallery');
}

/**
 * Implementation of hook_views_api.
 */
function views_gallery_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Implementation of hook_init().
 */
function views_gallery_init() {
  drupal_add_css(drupal_get_path('module', 'views_gallery') .'/views_gallery.css');
}

/**
 * Make sure image nodes are not added to 'all nodes' 
 * simpleviews listings, since we have a special gallery 
 * view to handle images.
 */
function views_gallery_simpleview_alter(&$view, $data) {
  if ($data['filter'] == 'all nodes' && $view->name != views_gallery_image_type()) {
    $display = $view->display['default'];

    $filters['type'] = array(
      'operator' => 'not in',
      'value' => array(views_gallery_image_type() => views_gallery_image_type()),
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array('operator' => FALSE, 'label' => ''),
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'relationship' => 'none',
    );
    
    $display->handler->override_option('filters', $filters);
  }
}

/**
 * Helper to implemetation of hook_imagecache_default_presets().
 */
function views_gallery_imagecache_default_presets() {
  $items = array(
    'reg' => array(
      'presetname' => 'reg',
      'actions' => array(
        '0' => array(
          'actionid' => '2',
          'presetid' => '1',
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_deprecated_scale',
          'data' => array(
            'fit' => 'inside',
            'width' => '500',
            'height' => '1000',
          ),
        ),
      ),
    ),
    'short' => array(
      'presetname' => 'short',
      'actions' => array(
        '0' => array(
          'actionid' => '5',
          'presetid' => '3',
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_deprecated_scale',
          'data' => array(
            'fit' => 'outside',
            'width' => '150',
            'height' => '150',
          ),
        ),
        '1' => array(
          'actionid' => '6',
          'presetid' => '3',
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_crop',
          'data' => array(
            'width' => '150',
            'height' => '75',
            'xoffset' => 'center',
            'yoffset' => 'center',
          ),
        ),
      ),
    ),
    'thumb' => array(
      'presetname' => 'thumb',
      'actions' => array(
        '0' => array(
          'actionid' => '3',
          'presetid' => '2',
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_deprecated_scale',
          'data' => array(
            'fit' => 'outside',
            'width' => '200',
            'height' => '150',
          ),
        ),
        '1' => array(
          'actionid' => '4',
          'presetid' => '2',
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_crop',
          'data' => array(
            'width' => '200',
            'height' => '150',
            'xoffset' => 'center',
            'yoffset' => 'center',
          ),
        ),
      ),
    ),
  );
  return $items;
}